// app/api/apply/route.ts
import { NextResponse } from "next/server";
import { Resend } from "resend";

type AnyDict = Record<string, any>;

function toObjectFromForm(fd: FormData): AnyDict {
  const obj: AnyDict = {};
  for (const [k, v] of fd.entries()) obj[k] = typeof v === "string" ? v : (v as File).name;
  return obj;
}

async function parseBody(req: Request): Promise<AnyDict> {
  const ct = (req.headers.get("content-type") || "").toLowerCase();
  try {
    if (ct.includes("application/json")) return await req.json();
    if (ct.includes("application/x-www-form-urlencoded") || ct.includes("multipart/form-data")) {
      const fd = await req.formData();
      return toObjectFromForm(fd);
    }
  } catch {}
  try { return await req.json(); } catch {}
  try { const fd = await req.formData(); return toObjectFromForm(fd); } catch {}
  return {};
}

function escapeHtml(str: string) {
  return String(str)
    .replace(/&/g, "&amp;").replace(/</g, "&lt;")
    .replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}

function renderKV(obj: AnyDict) {
  const rows = Object.entries(obj).map(([k, v]) =>
    `<tr><td style="padding:6px 10px;border:1px solid #eee"><b>${escapeHtml(k)}</b></td><td style="padding:6px 10px;border:1px solid #eee">${escapeHtml(String(v))}</td></tr>`
  ).join("");
  return `<table style="border-collapse:collapse;border:1px solid #eee">${rows}</table>`;
}

export const runtime = "nodejs";

export async function POST(req: Request) {
  try {
    const data = await parseBody(req);
    // console.log("APPLY BODY:", data);

    const apiKey = process.env.RESEND_API_KEY;
    if (!apiKey) return NextResponse.json({ ok:false, error:"Server email is not configured" }, { status:500 });

    const resend = new Resend(apiKey);
    const to   = process.env.TO_EMAIL   || "info@bitcoinpetertodd.com";
    const from = process.env.FROM_EMAIL || "no-reply@bitcoinpetertodd.com";

    const html = `
      <h2>New Whitelist Application</h2>
      ${renderKV(data)}
      <p style="color:#888;font-size:12px">This message was generated by the website form.</p>
    `;

    await resend.emails.send({ from, to, subject: "New Whitelist Application", html });
    // Не блокируем ответ даже если письмо заявителю не нужно
    if (data.email || data.mail) {
      await resend.emails.send({
        from,
        to: String(data.email || data.mail),
        subject: "We received your whitelist application",
        html: "<p>Thanks! We have received your application and will reach out for KYC/AML and on-chain instructions.</p>",
      }).catch(() => {});
    }

    return NextResponse.json({ ok:true });
  } catch (e:any) {
    console.error("apply route error:", e);
    return NextResponse.json({ ok:false, error: e?.message || "Unknown error" }, { status:500 });
  }
}
