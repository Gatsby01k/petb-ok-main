
import { NextResponse } from "next/server";
import { Resend } from "resend";

type AnyDict = Record<string, any>;

function toObjectFromForm(fd: FormData): AnyDict {
  const obj: AnyDict = {};
  for (const [k, v] of fd.entries()) obj[k] = typeof v === "string" ? v : (v as File).name;
  return obj;
}

async function parseBody(req: Request): Promise<AnyDict> {
  const ct = (req.headers.get("content-type") || "").toLowerCase();
  try {
    if (ct.includes("application/json")) return await req.json();
    if (ct.includes("application/x-www-form-urlencoded") || ct.includes("multipart/form-data")) {
      const fd = await req.formData();
      return toObjectFromForm(fd);
    }
  } catch {}
  try { return await req.json(); } catch {}
  try { const fd = await req.formData(); return toObjectFromForm(fd); } catch {}
  return {};
}

const escapeHtml = (s: string) =>
  String(s).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\"/g,"&quot;");

function pickFirst(obj: AnyDict, keys: string[]): string {
  for (const k of keys) {
    const v = obj?.[k];
    if (v !== undefined && v !== null && String(v).trim() !== "") return String(v).trim();
  }
  return "";
}

function renderKV(obj: AnyDict) {
  const rows = Object.entries(obj).map(([k, v]) =>
    `<tr><td style="padding:6px 10px;border:1px solid #eee"><b>${escapeHtml(k)}</b></td><td style="padding:6px 10px;border:1px solid #eee">${escapeHtml(String(v))}</td></tr>`
  ).join("");
  return `<table style="border-collapse:collapse;border:1px solid #eee">${rows}</table>`;
}

export const runtime = "nodejs";

export async function POST(req: Request) {
  try {
    const data = await parseBody(req);

    // Normalized fields (without breaking original table)
    const fullName = pickFirst(data, ["fullName","name","fullname","full_name","full-name","full name"]);
    const email    = pickFirst(data, ["email","mail","e-mail","e_mail"]);
    const tier     = pickFirst(data, ["tier","participation","level"]);
    const amount   = pickFirst(data, ["amount","btc","contribution","intended","value"]);
    const message  = pickFirst(data, ["message","msg","comment","note"]);
    const replyTo  = email || undefined;

    const apiKey = process.env.RESEND_API_KEY;
    if (!apiKey) return NextResponse.json({ ok:false, error:"Server email is not configured" }, { status:500 });

    const resend = new Resend(apiKey);
    const to   = process.env.TO_EMAIL   || "info@bitcoinpetertodd.com";
    const from = process.env.FROM_EMAIL || "no-reply@bitcoinpetertodd.com";

    const summary = `
      <h2>New Whitelist Application</h2>
      <ul>
        <li><b>Full name:</b> ${escapeHtml(fullName || "—")}</li>
        <li><b>Email:</b> ${escapeHtml(email || "—")}</li>
        <li><b>Participation tier:</b> ${escapeHtml(tier || "—")}</li>
        <li><b>Intended contribution (BTC):</b> ${escapeHtml(amount || "—")}</li>
      </ul>
      <p><b>Message:</b></p>
      <pre style="white-space:pre-wrap;font-family:ui-monospace,Menlo,Consolas,monospace">${escapeHtml(message || "")}</pre>
      <h3 style="margin-top:16px">Raw payload</h3>
    `;

    const html = summary + renderKV(data) + '<p style="color:#888;font-size:12px">This message was generated by the website form.</p>';

    await resend.emails.send({ from, to, subject: "New Whitelist Application", html, reply_to: replyTo });

    if (email) {
      await resend.emails.send({
        from,
        to: email,
        subject: "We received your whitelist application",
        html: "<p>Thanks! We have received your application and will reach out for KYC/AML and on-chain instructions.</p>",
      }).catch(() => {});
    }

    return NextResponse.json({ ok:true });
  } catch (e:any) {
    console.error("apply route error:", e);
    return NextResponse.json({ ok:false, error: e?.message || "Unknown error" }, { status:500 });
  }
}
